name "water_probe_acquanativa_ap3"
# Optionally declare the version number
# version "0.1"

using_task_library "iodrivers_base"

# If new data types need to be defined, they have to be put in a separate C++
# header, and this header will be loaded here
import_types_from "water_probe_acquanativa_ap3Types.hpp"
# Finally, it is pretty common that headers are directly loaded from an external
# library. In this case, the library must be first used (the name is the
# library's pkg-config name) and then the header can be used. Following Rock
# conventions, a common use-case would be:
#
# using_library "water_probe_acquanativa_ap3"
# import_types_from "water_probe_acquanativa_ap3/CustomType.hpp"
using_library "water_probe_acquanativa_ap3"
import_types_from "water_probe_acquanativa_ap3/ProbeMeasurements.hpp"

# Declare a new task context (i.e., a component)
#
# The corresponding C++ class can be edited in tasks/Task.hpp and
# tasks/Task.cpp, and will be put in the water_probe_acquanativa_ap3 namespace.
task_context "Task", subclasses: "iodrivers_base::Task" do
    # This is the default from now on, and should not be removed. Rock will
    # transition to a setup where all components use a configuration step.
    needs_configuration

    # Data output, each field reflects a mesurement
    output_port "probe_measurements", "water_probe_acquanativa_ap3/ProbeMeasurements"

    # Device address in the Modbus bus
    property "device_address", "/int", -1

    # If you want that component's updateHook() to be executed when the "input"
    # port gets data, uncomment this and comment the 'periodic' line
    # port_driven "input"
    # By default, the task will be periodic with a period of 0.1
    periodic 5
end
